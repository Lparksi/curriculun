name: Build Android APK

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  # ==========================================
  # Job 0: 代码质量检查（分析 + 单元测试）
  # ==========================================
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: prepare

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build
          key: ${{ runner.os }}-pub-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Cache Android SDK components
        uses: actions/cache@v4
        with:
          path: |
            ~/.android
            /usr/local/lib/android/sdk/ndk/27.0.12077973
            /usr/local/lib/android/sdk/cmake/3.22.1
          key: ${{ runner.os }}-android-sdk-${{ hashFiles('android/build.gradle', 'android/app/build.gradle', 'android/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-android-sdk-

      - name: Get dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze
        continue-on-error: true

      - name: Run tests
        run: flutter test
        continue-on-error: true

  # ==========================================
  # Job 1: 准备工作 - 获取版本信息
  # ==========================================
  prepare:
    name: Prepare Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      version_name: ${{ steps.version.outputs.VERSION_NAME }}
      version_code: ${{ steps.version.outputs.VERSION_CODE }}
      full_version: ${{ steps.version.outputs.FULL_VERSION }}
      build_type: ${{ steps.version.outputs.BUILD_TYPE }}
      build_label: ${{ steps.version.outputs.BUILD_LABEL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from pubspec
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          VERSION_NAME=$(echo $VERSION | cut -d'+' -f1)
          VERSION_CODE=$(echo $VERSION | cut -d'+' -f2)

          # 根据分支/标签添加版本标识
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tag 构建：使用 tag 名称（去除 v 前缀）
            TAG_NAME=${GITHUB_REF#refs/tags/}
            FULL_VERSION="${TAG_NAME#v}"
            BUILD_TYPE="release"
            BUILD_LABEL="release"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # main 分支：添加 -release 后缀
            FULL_VERSION="${VERSION_NAME}-release"
            BUILD_TYPE="release"
            BUILD_LABEL="release"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            # develop 分支：添加 -dev 后缀和短 commit SHA
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            FULL_VERSION="${VERSION_NAME}-dev+${SHORT_SHA}"
            BUILD_TYPE="debug"
            BUILD_LABEL="dev-${SHORT_SHA}"
          else
            # PR 或其他分支：添加 -pr 后缀和短 commit SHA
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            FULL_VERSION="${VERSION_NAME}-pr+${SHORT_SHA}"
            BUILD_TYPE="debug"
            BUILD_LABEL="pr-${SHORT_SHA}"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_OUTPUT
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_OUTPUT
          echo "BUILD_LABEL=$BUILD_LABEL" >> $GITHUB_OUTPUT

          echo "📋 Version Info:"
          echo "  Base Version: $VERSION"
          echo "  Version Name: $VERSION_NAME"
          echo "  Version Code: $VERSION_CODE"
          echo "  Full Version: $FULL_VERSION"
          echo "  Build Type: $BUILD_TYPE"
          echo "  Build Label: $BUILD_LABEL"

  # ==========================================
  # Job 2: 构建分离架构 APK（并行）
  # ==========================================
  build-split-apk:
    name: Build Split APK
    runs-on: ubuntu-latest
    needs: [prepare, quality-checks]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build
          key: ${{ runner.os }}-pub-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Cache Gradle directories
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/build.gradle', 'android/**/gradle-wrapper.properties', 'android/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Decode and setup google-services.json
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > android/app/google-services.json
          echo "✅ google-services.json created successfully"
          if [ ! -s android/app/google-services.json ]; then
            echo "❌ Error: google-services.json is empty"
            exit 1
          fi

      - name: Get dependencies
        run: flutter pub get

      # 使用 --split-per-abi 减小单个 APK 大小（约减少 30%）
      # 生成的 APK 文件：
      # - app-armeabi-v7a-{debug|release}.apk (32位 ARM)
      # - app-arm64-v8a-{debug|release}.apk (64位 ARM，主流设备)
      # - app-x86_64-{debug|release}.apk (64位 x86，模拟器)
      - name: Build Split APK (Debug)
        if: needs.prepare.outputs.build_type == 'debug'
        run: |
          flutter build apk --debug --split-per-abi \
            --build-name="${{ needs.prepare.outputs.full_version }}" \
            --build-number="${{ needs.prepare.outputs.version_code }}"

      - name: Build Split APK (Release)
        if: needs.prepare.outputs.build_type == 'release'
        run: |
          flutter build apk --release --split-per-abi \
            --build-name="${{ needs.prepare.outputs.full_version }}" \
            --build-number="${{ needs.prepare.outputs.version_code }}"

      - name: Rename Split APK
        run: |
          FULL_VERSION="${{ needs.prepare.outputs.full_version }}"
          BUILD_TYPE="${{ needs.prepare.outputs.build_type }}"

          # 分离架构 APK 重命名
          for apk in build/app/outputs/flutter-apk/app-*-${BUILD_TYPE}.apk; do
            if [ -f "$apk" ]; then
              abi=$(echo "$apk" | sed "s/.*app-\(.*\)-${BUILD_TYPE}.apk/\1/")
              mv "$apk" "build/app/outputs/flutter-apk/curriculum-${FULL_VERSION}-${abi}-${BUILD_TYPE}.apk"
            fi
          done

      - name: List Split APKs
        run: |
          echo "📦 Generated Split APK files:"
          ls -lh build/app/outputs/flutter-apk/curriculum-*-${{ needs.prepare.outputs.build_type }}.apk || echo "No APK files found"

      - name: Upload Split APK
        uses: actions/upload-artifact@v4
        with:
          name: split-apk-${{ needs.prepare.outputs.build_label }}
          path: build/app/outputs/flutter-apk/curriculum-*-${{ needs.prepare.outputs.build_type }}.apk
          retention-days: ${{ needs.prepare.outputs.build_type == 'release' && 30 || 7 }}

  # ==========================================
  # Job 3: 构建通用 APK（并行）
  # ==========================================
  build-universal-apk:
    name: Build Universal APK
    runs-on: ubuntu-latest
    needs: [prepare, quality-checks]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build
          key: ${{ runner.os }}-pub-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Cache Android SDK components
        uses: actions/cache@v4
        with:
          path: |
            ~/.android
            /usr/local/lib/android/sdk/ndk/27.0.12077973
            /usr/local/lib/android/sdk/cmake/3.22.1
          key: ${{ runner.os }}-android-sdk-${{ hashFiles('android/build.gradle', 'android/app/build.gradle', 'android/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-android-sdk-

      - name: Cache Gradle directories
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/build.gradle', 'android/**/gradle-wrapper.properties', 'android/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Decode and setup google-services.json
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > android/app/google-services.json
          echo "✅ google-services.json created successfully"
          if [ ! -s android/app/google-services.json ]; then
            echo "❌ Error: google-services.json is empty"
            exit 1
          fi

      - name: Get dependencies
        run: flutter pub get

      # 构建通用 APK（包含所有架构，文件较大但兼容所有设备）
      # 适合不确定设备架构的用户
      - name: Build Universal APK (Debug)
        if: needs.prepare.outputs.build_type == 'debug'
        run: |
          flutter build apk --debug \
            --build-name="${{ needs.prepare.outputs.full_version }}" \
            --build-number="${{ needs.prepare.outputs.version_code }}"

      - name: Build Universal APK (Release)
        if: needs.prepare.outputs.build_type == 'release'
        run: |
          flutter build apk --release \
            --build-name="${{ needs.prepare.outputs.full_version }}" \
            --build-number="${{ needs.prepare.outputs.version_code }}"

      - name: Rename Universal APK
        run: |
          FULL_VERSION="${{ needs.prepare.outputs.full_version }}"
          BUILD_TYPE="${{ needs.prepare.outputs.build_type }}"

          # 通用 APK 重命名
          if [ -f build/app/outputs/flutter-apk/app-${BUILD_TYPE}.apk ]; then
            mv build/app/outputs/flutter-apk/app-${BUILD_TYPE}.apk \
               build/app/outputs/flutter-apk/curriculum-${FULL_VERSION}-universal-${BUILD_TYPE}.apk
          fi

      - name: List Universal APK
        run: |
          echo "📦 Generated Universal APK file:"
          ls -lh build/app/outputs/flutter-apk/curriculum-*-universal-${{ needs.prepare.outputs.build_type }}.apk || echo "No APK file found"

      - name: Upload Universal APK
        uses: actions/upload-artifact@v4
        with:
          name: universal-apk-${{ needs.prepare.outputs.build_label }}
          path: build/app/outputs/flutter-apk/curriculum-*-universal-${{ needs.prepare.outputs.build_type }}.apk
          retention-days: ${{ needs.prepare.outputs.build_type == 'release' && 30 || 7 }}

  # ==========================================
  # Job 4: 汇总和发布
  # ==========================================
  finalize:
    name: Finalize Build
    runs-on: ubuntu-latest
    needs: [prepare, build-split-apk, build-universal-apk]
    if: always() && needs.prepare.result == 'success'

    steps:
      - name: Download Split APKs
        uses: actions/download-artifact@v4
        with:
          name: split-apk-${{ needs.prepare.outputs.build_label }}
          path: ./apks/

      - name: Download Universal APK
        uses: actions/download-artifact@v4
        with:
          name: universal-apk-${{ needs.prepare.outputs.build_label }}
          path: ./apks/

      - name: List All APKs
        run: |
          echo "📦 All Generated APK files:"
          ls -lh ./apks/*.apk || echo "No APK files found"

      - name: Generate Build Summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version Information:**" >> $GITHUB_STEP_SUMMARY
          echo "- Base Version: \`${{ needs.prepare.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Full Version: \`${{ needs.prepare.outputs.full_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Build Type: \`${{ needs.prepare.outputs.build_type }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Build Label: \`${{ needs.prepare.outputs.build_label }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch/Tag:**" >> $GITHUB_STEP_SUMMARY
          echo "- Ref: \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated APK Files:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -lh ./apks/*.apk 2>/dev/null || echo "No APK files found"
          ls -lh ./apks/*.apk >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No APK files found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Jobs Status:**" >> $GITHUB_STEP_SUMMARY
          echo "- Split APK Build: \`${{ needs.build-split-apk.result }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Universal APK Build: \`${{ needs.build-universal-apk.result }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload Combined APKs
        uses: actions/upload-artifact@v4
        with:
          name: curriculum-${{ needs.prepare.outputs.build_label }}-all-apks
          path: ./apks/*.apk
          retention-days: ${{ needs.prepare.outputs.build_type == 'release' && 30 || 7 }}

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ./apks/*.apk
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
