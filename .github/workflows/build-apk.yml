name: Build Android APK

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true

      - name: Decode and setup google-services.json
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > android/app/google-services.json
          echo "✅ google-services.json created successfully"
          # 验证文件是否有效
          if [ ! -s android/app/google-services.json ]; then
            echo "❌ Error: google-services.json is empty"
            exit 1
          fi

      - name: Get dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze
        continue-on-error: true

      - name: Run tests
        run: flutter test
        continue-on-error: true

      # 使用 --split-per-abi 减小单个 APK 大小（约减少 30%）
      # 生成的 APK 文件：
      # - app-armeabi-v7a-{debug|release}.apk (32位 ARM)
      # - app-arm64-v8a-{debug|release}.apk (64位 ARM，主流设备)
      # - app-x86_64-{debug|release}.apk (64位 x86，模拟器)
      - name: Build APK Split by ABI (Debug)
        if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
        run: flutter build apk --debug --split-per-abi

      - name: Build APK Split by ABI (Release)
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        run: flutter build apk --release --split-per-abi

      # 构建通用 APK（包含所有架构，文件较大但兼容所有设备）
      # 适合不确定设备架构的用户
      - name: Build Universal APK (Debug)
        if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
        run: flutter build apk --debug

      - name: Build Universal APK (Release)
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        run: flutter build apk --release

      - name: Get version from pubspec
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          VERSION_NAME=$(echo $VERSION | cut -d'+' -f1)
          VERSION_CODE=$(echo $VERSION | cut -d'+' -f2)

          # 根据分支/标签添加版本标识
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tag 构建：使用 tag 名称（去除 v 前缀）
            TAG_NAME=${GITHUB_REF#refs/tags/}
            FULL_VERSION="${TAG_NAME#v}"
            BUILD_TYPE="release"
            BUILD_LABEL="release"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # main 分支：添加 -release 后缀
            FULL_VERSION="${VERSION_NAME}-release"
            BUILD_TYPE="release"
            BUILD_LABEL="release"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            # develop 分支：添加 -dev 后缀和短 commit SHA
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            FULL_VERSION="${VERSION_NAME}-dev+${SHORT_SHA}"
            BUILD_TYPE="debug"
            BUILD_LABEL="dev-${SHORT_SHA}"
          else
            # PR 或其他分支：添加 -pr 后缀和短 commit SHA
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            FULL_VERSION="${VERSION_NAME}-pr+${SHORT_SHA}"
            BUILD_TYPE="debug"
            BUILD_LABEL="pr-${SHORT_SHA}"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_OUTPUT
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_OUTPUT
          echo "BUILD_LABEL=$BUILD_LABEL" >> $GITHUB_OUTPUT

          echo "📋 Version Info:"
          echo "  Base Version: $VERSION"
          echo "  Version Name: $VERSION_NAME"
          echo "  Version Code: $VERSION_CODE"
          echo "  Full Version: $FULL_VERSION"
          echo "  Build Type: $BUILD_TYPE"
          echo "  Build Label: $BUILD_LABEL"

      - name: Rename APK
        run: |
          FULL_VERSION="${{ steps.version.outputs.FULL_VERSION }}"

          # 通用 Release APK 重命名
          if [ -f build/app/outputs/flutter-apk/app-release.apk ]; then
            mv build/app/outputs/flutter-apk/app-release.apk \
               build/app/outputs/flutter-apk/curriculum-${FULL_VERSION}-universal-release.apk
          fi

          # 通用 Debug APK 重命名
          if [ -f build/app/outputs/flutter-apk/app-debug.apk ]; then
            mv build/app/outputs/flutter-apk/app-debug.apk \
               build/app/outputs/flutter-apk/curriculum-${FULL_VERSION}-universal-debug.apk
          fi

          # 分离架构 Release APK 重命名
          for apk in build/app/outputs/flutter-apk/app-*-release.apk; do
            if [ -f "$apk" ]; then
              abi=$(echo "$apk" | sed 's/.*app-\(.*\)-release.apk/\1/')
              mv "$apk" "build/app/outputs/flutter-apk/curriculum-${FULL_VERSION}-${abi}-release.apk"
            fi
          done

          # 分离架构 Debug APK 重命名
          for apk in build/app/outputs/flutter-apk/app-*-debug.apk; do
            if [ -f "$apk" ]; then
              abi=$(echo "$apk" | sed 's/.*app-\(.*\)-debug.apk/\1/')
              mv "$apk" "build/app/outputs/flutter-apk/curriculum-${FULL_VERSION}-${abi}-debug.apk"
            fi
          done

      - name: List generated APKs
        run: |
          echo "📦 Generated APK files:"
          ls -lh build/app/outputs/flutter-apk/curriculum-*.apk || echo "No APK files found"

      - name: Generate Build Summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version Information:**" >> $GITHUB_STEP_SUMMARY
          echo "- Base Version: \`${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Full Version: \`${{ steps.version.outputs.FULL_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Build Type: \`${{ steps.version.outputs.BUILD_TYPE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Build Label: \`${{ steps.version.outputs.BUILD_LABEL }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch/Tag:**" >> $GITHUB_STEP_SUMMARY
          echo "- Ref: \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated APK Files:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -lh build/app/outputs/flutter-apk/curriculum-*.apk 2>/dev/null || echo "No APK files found"
          ls -lh build/app/outputs/flutter-apk/curriculum-*.apk >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No APK files found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload APK (Release)
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: curriculum-${{ steps.version.outputs.BUILD_LABEL }}-apk
          path: build/app/outputs/flutter-apk/curriculum-*-release.apk
          retention-days: 30

      - name: Upload APK (Debug)
        if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: curriculum-${{ steps.version.outputs.BUILD_LABEL }}-apk
          path: build/app/outputs/flutter-apk/curriculum-*-debug.apk
          retention-days: 7

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: build/app/outputs/flutter-apk/curriculum-*-release.apk
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
